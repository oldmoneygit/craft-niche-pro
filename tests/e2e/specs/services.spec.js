/**
 * Testes E2E para Gest√£o de Servi√ßos - KorLab Nutri
 * Cobertura: CRUD completo de servi√ßos, assinaturas, pre√ßos,
 * categorias e integra√ß√£o com clientes e planos
 */

const puppeteer = require('puppeteer');
const config = require('../config/puppeteer.config.cjs');
const AuthHelper = require('../helpers/auth.helper.js');
const FormHelper = require('../helpers/form.helper.js');
const NavigationHelper = require('../helpers/navigation.helper.js');
const testData = require('../fixtures/test-data.js');

describe('Gest√£o de Servi√ßos - KorLab Nutri', () => {
  let page;
  let authHelper;
  let formHelper;
  let navHelper;
  let createdServiceId;

  beforeAll(async () => {
    page = await global.__BROWSER__.newPage();
    authHelper = new AuthHelper(page);
    formHelper = new FormHelper(page);
    navHelper = new NavigationHelper(page);
    
    // Login para acessar funcionalidades
    await authHelper.login(testData.users.validUser.email, testData.users.validUser.password);
    console.log('üöÄ Iniciando testes de servi√ßos...');
  });

  afterAll(async () => {
    // Limpar dados de teste se necess√°rio
    await authHelper.clearAuthData();
    await page.close();
    console.log('üèÅ Finalizando testes de servi√ßos...');
  });

  beforeEach(async () => {
    await navHelper.navigateTo('/servicos');
    await navHelper.waitForElement(testData.selectors.serviceList);
  });

  describe('Cria√ß√£o de Servi√ßos', () => {
    it('deve criar um novo servi√ßo com dados v√°lidos', async () => {
      console.log('üõ†Ô∏è Testando cria√ß√£o de servi√ßo...');
      
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Preencher formul√°rio de servi√ßo
      await formHelper.fillInput('input[name="name"]', testData.services.validService.name);
      await formHelper.fillInput('textarea[name="description"]', testData.services.validService.description);
      await formHelper.fillInput('input[name="price"]', testData.services.validService.price.toString());
      await formHelper.fillInput('input[name="duration_days"]', testData.services.validService.duration_days.toString());
      await formHelper.selectOption('select[name="category"]', testData.services.validService.category);
      await formHelper.selectOption('select[name="type"]', testData.services.validService.type);

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo criado com sucesso!', 'success');
      
      // Verificar se o servi√ßo aparece na lista
      await navHelper.waitForText(testData.services.validService.name, '[data-testid="service-name"]');
      console.log('‚úÖ Servi√ßo criado com sucesso');
    });

    it('deve validar campos obrigat√≥rios', async () => {
      console.log('üîç Testando valida√ß√£o de campos obrigat√≥rios...');
      
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Tentar salvar sem preencher campos obrigat√≥rios
      await formHelper.clickButton('[data-testid="save-service-button"]');
      
      // Verificar mensagens de erro
      await navHelper.waitForText('Nome √© obrigat√≥rio', 'p.text-destructive');
      await navHelper.waitForText('Pre√ßo √© obrigat√≥rio', 'p.text-destructive');
      await navHelper.waitForText('Categoria √© obrigat√≥ria', 'p.text-destructive');
      
      console.log('‚úÖ Valida√ß√£o de campos funcionando');
    });

    it('deve validar pre√ßo num√©rico', async () => {
      console.log('üí∞ Testando valida√ß√£o de pre√ßo...');
      
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await navHelper.waitForElement(testData.selectors.serviceForm);

      await formHelper.fillInput('input[name="name"]', 'Servi√ßo Teste');
      await formHelper.fillInput('input[name="price"]', 'pre√ßo-inv√°lido');
      await formHelper.selectOption('select[name="category"]', 'nutrition');
      
      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForText('Pre√ßo deve ser um n√∫mero v√°lido', 'p.text-destructive');
      
      console.log('‚úÖ Valida√ß√£o de pre√ßo funcionando');
    });

    it('deve permitir m√∫ltiplas categorias', async () => {
      console.log('üìÇ Testando m√∫ltiplas categorias...');
      
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await navHelper.waitForElement(testData.selectors.serviceForm);

      await formHelper.fillInput('input[name="name"]', 'Servi√ßo Multi-Categoria');
      await formHelper.fillInput('input[name="price"]', '150.00');
      
      // Selecionar m√∫ltiplas categorias
      await page.check('input[name="category_nutrition"]');
      await page.check('input[name="category_consultation"]');
      
      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo criado com sucesso!', 'success');
      
      console.log('‚úÖ Servi√ßo com m√∫ltiplas categorias criado');
    });
  });

  describe('Visualiza√ß√£o e Filtros', () => {
    it('deve exibir lista de servi√ßos com pagina√ß√£o', async () => {
      console.log('üìã Testando lista de servi√ßos...');
      
      // Verificar se a lista est√° carregada
      const serviceItems = await page.$$('[data-testid="service-item"]');
      expect(serviceItems.length).toBeGreaterThanOrEqual(0);

      // Testar pagina√ß√£o se houver muitos servi√ßos
      const pagination = await page.$('[data-testid="pagination"]');
      if (pagination) {
        await formHelper.clickButton('[data-testid="next-page-button"]');
        await navHelper.waitForElement(testData.selectors.serviceList);
      }
      
      console.log('‚úÖ Lista de servi√ßos exibida corretamente');
    });

    it('deve filtrar servi√ßos por categoria', async () => {
      console.log('üîç Testando filtro por categoria...');
      
      await formHelper.selectOption('select[name="filter_category"]', 'nutrition');
      await formHelper.clickButton('[data-testid="apply-category-filter-button"]');

      await navHelper.waitForElement(testData.selectors.serviceList);
      
      // Verificar se apenas servi√ßos da categoria selecionada s√£o exibidos
      const categoryElements = await page.$$('[data-testid="service-category"]');
      for (const element of categoryElements) {
        const category = await element.evaluate(el => el.textContent);
        expect(category).toContain('nutrition');
      }
      
      console.log('‚úÖ Filtro por categoria funcionando');
    });

    it('deve filtrar servi√ßos por tipo', async () => {
      console.log('üîç Testando filtro por tipo...');
      
      await formHelper.selectOption('select[name="filter_type"]', 'subscription');
      await formHelper.clickButton('[data-testid="apply-type-filter-button"]');

      await navHelper.waitForElement(testData.selectors.serviceList);
      
      console.log('‚úÖ Filtro por tipo funcionando');
    });

    it('deve filtrar servi√ßos por faixa de pre√ßo', async () => {
      console.log('üí∞ Testando filtro por pre√ßo...');
      
      await formHelper.fillInput('input[name="filter_price_min"]', '100');
      await formHelper.fillInput('input[name="filter_price_max"]', '500');
      await formHelper.clickButton('[data-testid="apply-price-filter-button"]');

      await navHelper.waitForElement(testData.selectors.serviceList);
      
      console.log('‚úÖ Filtro por pre√ßo funcionando');
    });

    it('deve buscar servi√ßos por nome', async () => {
      console.log('üîç Testando busca por nome...');
      
      await formHelper.fillInput('input[name="search"]', testData.services.validService.name);
      await formHelper.clickButton('[data-testid="search-button"]');

      await navHelper.waitForElement(testData.selectors.serviceList);
      
      // Verificar se o servi√ßo encontrado est√° na lista
      await navHelper.waitForText(testData.services.validService.name, '[data-testid="service-name"]');
      
      console.log('‚úÖ Busca por nome funcionando');
    });
  });

  describe('Edi√ß√£o de Servi√ßos', () => {
    beforeEach(async () => {
      // Criar um servi√ßo para editar
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await formHelper.fillInput('input[name="name"]', testData.services.validService.name);
      await formHelper.fillInput('input[name="price"]', testData.services.validService.price.toString());
      await formHelper.selectOption('select[name="category"]', testData.services.validService.category);
      await formHelper.selectOption('select[name="type"]', testData.services.validService.type);
      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo criado com sucesso!', 'success');
    });

    it('deve editar dados de um servi√ßo existente', async () => {
      console.log('‚úèÔ∏è Testando edi√ß√£o de servi√ßo...');
      
      // Clicar no bot√£o de editar do primeiro servi√ßo
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Alterar dados
      const updatedName = 'Plano Nutricional Premium';
      const updatedPrice = '250.00';
      await formHelper.fillInput('input[name="name"]', updatedName);
      await formHelper.fillInput('input[name="price"]', updatedPrice);

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      // Verificar se as altera√ß√µes foram salvas
      await navHelper.waitForText(updatedName, '[data-testid="service-name"]');
      await navHelper.waitForText(updatedPrice, '[data-testid="service-price"]');
      
      console.log('‚úÖ Servi√ßo editado com sucesso');
    });

    it('deve ativar/desativar servi√ßo', async () => {
      console.log('üîÑ Testando ativa√ß√£o/desativa√ß√£o...');
      
      // Clicar no toggle de ativo/inativo
      await formHelper.clickButton('[data-testid="toggle-service-status-button"]:first-child');
      
      // Verificar se o status mudou
      const statusElement = await page.$('[data-testid="service-status"]:first-child');
      const status = await statusElement.evaluate(el => el.textContent);
      
      expect(status).toMatch(/inativo|desativado/i);
      
      console.log('‚úÖ Status do servi√ßo alterado');
    });

    it('deve duplicar servi√ßo', async () => {
      console.log('üìã Testando duplica√ß√£o de servi√ßo...');
      
      await formHelper.clickButton('[data-testid="duplicate-service-button"]:first-child');
      await navHelper.waitForElement('[data-testid="duplicate-modal"]');

      await formHelper.fillInput('input[name="duplicate_name"]', 'C√≥pia do Servi√ßo');
      await formHelper.clickButton('[data-testid="confirm-duplicate-button"]');
      
      await navHelper.waitForToast('Servi√ßo duplicado com sucesso!', 'success');
      
      // Verificar se o servi√ßo duplicado aparece na lista
      await navHelper.waitForText('C√≥pia do Servi√ßo', '[data-testid="service-name"]');
      
      console.log('‚úÖ Servi√ßo duplicado com sucesso');
    });
  });

  describe('Assinaturas', () => {
    it('deve criar assinatura para cliente', async () => {
      console.log('üìù Testando cria√ß√£o de assinatura...');
      
      // Criar um servi√ßo de assinatura primeiro
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await formHelper.fillInput('input[name="name"]', 'Plano Mensal');
      await formHelper.fillInput('input[name="price"]', '200.00');
      await formHelper.selectOption('select[name="type"]', 'subscription');
      await formHelper.selectOption('select[name="category"]', 'nutrition');
      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo criado com sucesso!', 'success');

      // Criar assinatura
      await formHelper.clickButton('[data-testid="create-subscription-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.subscriptionForm);

      await formHelper.selectOption('select[name="client_id"]', '1'); // Assumindo cliente existente
      await formHelper.fillInput('input[name="start_date"]', testData.services.validSubscription.start_date);
      await formHelper.fillInput('textarea[name="notes"]', testData.services.validSubscription.notes);

      await formHelper.clickButton('[data-testid="save-subscription-button"]');
      await navHelper.waitForToast('Assinatura criada com sucesso!', 'success');
      
      console.log('‚úÖ Assinatura criada');
    });

    it('deve gerenciar renova√ß√£o de assinatura', async () => {
      console.log('üîÑ Testando renova√ß√£o de assinatura...');
      
      // Assumindo que j√° existe uma assinatura
      await formHelper.clickButton('[data-testid="manage-subscription-button"]:first-child');
      await navHelper.waitForElement('[data-testid="subscription-management-modal"]');

      await formHelper.clickButton('[data-testid="renew-subscription-button"]');
      await navHelper.waitForElement('[data-testid="renewal-modal"]');

      await formHelper.fillInput('input[name="renewal_date"]', '2024-02-15');
      await formHelper.clickButton('[data-testid="confirm-renewal-button"]');
      
      await navHelper.waitForToast('Assinatura renovada com sucesso!', 'success');
      
      console.log('‚úÖ Assinatura renovada');
    });

    it('deve cancelar assinatura', async () => {
      console.log('‚ùå Testando cancelamento de assinatura...');
      
      await formHelper.clickButton('[data-testid="manage-subscription-button"]:first-child');
      await navHelper.waitForElement('[data-testid="subscription-management-modal"]');

      await formHelper.clickButton('[data-testid="cancel-subscription-button"]');
      await navHelper.waitForElement('[data-testid="cancel-confirmation-modal"]');

      await formHelper.fillInput('textarea[name="cancellation_reason"]', 'Cancelamento solicitado pelo cliente');
      await formHelper.clickButton('[data-testid="confirm-cancel-button"]');
      
      await navHelper.waitForToast('Assinatura cancelada com sucesso!', 'success');
      
      console.log('‚úÖ Assinatura cancelada');
    });

    it('deve exibir hist√≥rico de assinaturas', async () => {
      console.log('üìä Testando hist√≥rico de assinaturas...');
      
      await formHelper.clickButton('[data-testid="view-subscription-history-button"]:first-child');
      await navHelper.waitForElement('[data-testid="history-modal"]');

      // Verificar se h√° registros no hist√≥rico
      const historyItems = await page.$$('[data-testid="history-item"]');
      expect(historyItems.length).toBeGreaterThanOrEqual(0);
      
      console.log('‚úÖ Hist√≥rico de assinaturas exibido');
    });
  });

  describe('Exclus√£o de Servi√ßos', () => {
    beforeEach(async () => {
      // Criar um servi√ßo para excluir
      await formHelper.clickButton(testData.selectors.addServiceButton);
      await formHelper.fillInput('input[name="name"]', testData.services.validService.name);
      await formHelper.fillInput('input[name="price"]', testData.services.validService.price.toString());
      await formHelper.selectOption('select[name="category"]', testData.services.validService.category);
      await formHelper.selectOption('select[name="type"]', testData.services.validService.type);
      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo criado com sucesso!', 'success');
    });

    it('deve excluir um servi√ßo existente', async () => {
      console.log('üóëÔ∏è Testando exclus√£o de servi√ßo...');
      
      // Contar servi√ßos antes da exclus√£o
      const servicesBefore = await page.$$('[data-testid="service-item"]');
      const countBefore = servicesBefore.length;

      // Clicar no bot√£o de excluir
      await formHelper.clickButton('[data-testid="delete-service-button"]:first-child');
      await navHelper.waitForElement('[data-testid="delete-confirmation-modal"]');

      // Confirmar exclus√£o
      await formHelper.clickButton('[data-testid="confirm-delete-button"]');
      await navHelper.waitForToast('Servi√ßo exclu√≠do com sucesso!', 'success');

      // Verificar se o servi√ßo foi removido
      const servicesAfter = await page.$$('[data-testid="service-item"]');
      const countAfter = servicesAfter.length;
      
      expect(countAfter).toBe(countBefore - 1);
      
      console.log('‚úÖ Servi√ßo exclu√≠do com sucesso');
    });

    it('deve impedir exclus√£o de servi√ßo com assinaturas ativas', async () => {
      console.log('‚ö†Ô∏è Testando prote√ß√£o contra exclus√£o...');
      
      // Criar uma assinatura para o servi√ßo
      await formHelper.clickButton('[data-testid="create-subscription-button"]:first-child');
      await formHelper.selectOption('select[name="client_id"]', '1');
      await formHelper.clickButton('[data-testid="save-subscription-button"]');
      await navHelper.waitForToast('Assinatura criada com sucesso!', 'success');

      // Tentar excluir o servi√ßo
      await formHelper.clickButton('[data-testid="delete-service-button"]:first-child');
      await navHelper.waitForElement('[data-testid="delete-confirmation-modal"]');
      await formHelper.clickButton('[data-testid="confirm-delete-button"]');
      
      // Deve mostrar erro
      await navHelper.waitForToast('N√£o √© poss√≠vel excluir servi√ßo com assinaturas ativas', 'destructive');
      
      console.log('‚úÖ Prote√ß√£o contra exclus√£o funcionando');
    });
  });

  describe('Integra√ß√£o com Outros M√≥dulos', () => {
    it('deve vincular servi√ßo a plano alimentar', async () => {
      console.log('üçΩÔ∏è Testando integra√ß√£o com planos alimentares...');
      
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Vincular a um plano alimentar
      await formHelper.selectOption('select[name="meal_plan_template"]', '1');
      await formHelper.fillInput('textarea[name="description"]', 'Servi√ßo com plano alimentar inclu√≠do');

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      console.log('‚úÖ Servi√ßo vinculado ao plano alimentar');
    });

    it('deve incluir question√°rio no servi√ßo', async () => {
      console.log('üìã Testando integra√ß√£o com question√°rios...');
      
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Incluir question√°rio obrigat√≥rio
      await page.check('input[name="include_questionnaire"]');
      await formHelper.selectOption('select[name="questionnaire_id"]', '1');

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      console.log('‚úÖ Question√°rio inclu√≠do no servi√ßo');
    });

    it('deve configurar agendamentos autom√°ticos', async () => {
      console.log('üìÖ Testando agendamentos autom√°ticos...');
      
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Configurar agendamentos autom√°ticos
      await page.check('input[name="auto_schedule_appointments"]');
      await formHelper.selectOption('select[name="appointment_frequency"]', 'weekly');
      await formHelper.fillInput('input[name="appointment_duration"]', '60');

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      console.log('‚úÖ Agendamentos autom√°ticos configurados');
    });
  });

  describe('Relat√≥rios e Estat√≠sticas', () => {
    it('deve exibir estat√≠sticas de servi√ßos', async () => {
      console.log('üìä Testando estat√≠sticas de servi√ßos...');
      
      // Verificar cards de estat√≠sticas
      const totalServices = await page.$eval('[data-testid="total-services"]', el => el.textContent);
      const activeServices = await page.$eval('[data-testid="active-services"]', el => el.textContent);
      const totalSubscriptions = await page.$eval('[data-testid="total-subscriptions"]', el => el.textContent);
      const monthlyRevenue = await page.$eval('[data-testid="monthly-revenue"]', el => el.textContent);

      expect(parseInt(totalServices)).toBeGreaterThanOrEqual(0);
      expect(parseInt(activeServices)).toBeGreaterThanOrEqual(0);
      expect(parseInt(totalSubscriptions)).toBeGreaterThanOrEqual(0);
      expect(parseFloat(monthlyRevenue)).toBeGreaterThanOrEqual(0);
      
      console.log('‚úÖ Estat√≠sticas de servi√ßos exibidas');
    });

    it('deve gerar relat√≥rio de servi√ßos', async () => {
      console.log('üìã Testando gera√ß√£o de relat√≥rio...');
      
      await formHelper.clickButton('[data-testid="generate-services-report-button"]');
      await navHelper.waitForElement('[data-testid="report-modal"]');

      await formHelper.fillInput('input[name="report_date_from"]', '2024-01-01');
      await formHelper.fillInput('input[name="report_date_to"]', '2024-12-31');
      await formHelper.selectOption('select[name="report_format"]', 'excel');
      
      await formHelper.clickButton('[data-testid="generate-report-button"]');
      await navHelper.waitForToast('Relat√≥rio gerado com sucesso!', 'success');
      
      console.log('‚úÖ Relat√≥rio de servi√ßos gerado');
    });

    it('deve exibir gr√°fico de servi√ßos mais populares', async () => {
      console.log('üìà Testando gr√°fico de popularidade...');
      
      await formHelper.clickButton('[data-testid="view-analytics-button"]');
      await navHelper.waitForElement('[data-testid="analytics-modal"]');

      // Verificar se o gr√°fico est√° presente
      const chart = await page.$('[data-testid="popular-services-chart"]');
      expect(chart).not.toBeNull();
      
      console.log('‚úÖ Gr√°fico de servi√ßos populares exibido');
    });
  });

  describe('Configura√ß√µes Avan√ßadas', () => {
    it('deve configurar pre√ßos promocionais', async () => {
      console.log('üí∞ Testando pre√ßos promocionais...');
      
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Configurar pre√ßo promocional
      await page.check('input[name="enable_promotional_price"]');
      await formHelper.fillInput('input[name="promotional_price"]', '150.00');
      await formHelper.fillInput('input[name="promotion_start"]', '2024-01-01');
      await formHelper.fillInput('input[name="promotion_end"]', '2024-01-31');

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      console.log('‚úÖ Pre√ßo promocional configurado');
    });

    it('deve configurar descontos por quantidade', async () => {
      console.log('üéØ Testando descontos por quantidade...');
      
      await formHelper.clickButton('[data-testid="edit-service-button"]:first-child');
      await navHelper.waitForElement(testData.selectors.serviceForm);

      // Configurar desconto por quantidade
      await page.check('input[name="enable_quantity_discount"]');
      await formHelper.fillInput('input[name="discount_min_quantity"]', '3');
      await formHelper.fillInput('input[name="discount_percentage"]', '10');

      await formHelper.clickButton('[data-testid="save-service-button"]');
      await navHelper.waitForToast('Servi√ßo atualizado com sucesso!', 'success');
      
      console.log('‚úÖ Desconto por quantidade configurado');
    });
  });
});