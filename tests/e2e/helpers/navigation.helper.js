/**
 * Helper para navega√ß√£o nos testes E2E
 * Utilit√°rios para navega√ß√£o entre p√°ginas e valida√ß√£o de rotas
 */

class NavigationHelper {
  constructor(page, config) {
    this.page = page;
    this.config = config;
    this.baseURL = config.baseURL;
  }

  /**
   * Navega para uma p√°gina espec√≠fica
   */
  async navigateTo(page, waitForSelector = null) {
    console.log(`üß≠ Navegando para: ${page}`);
    
    try {
      const url = this.config.app.urls[page] || page;
      const fullUrl = url.startsWith('http') ? url : `${this.baseURL}${url}`;
      
      await this.page.goto(fullUrl, {
        waitUntil: 'networkidle2',
        timeout: this.config.app.timeouts.navigation,
      });

      // Aguardar elemento espec√≠fico se fornecido
      if (waitForSelector) {
        await this.page.waitForSelector(waitForSelector, {
          timeout: this.config.app.timeouts.element,
        });
      }

      console.log(`‚úÖ Navega√ß√£o para ${page} realizada com sucesso`);
      return true;

    } catch (error) {
      console.error(`‚ùå Erro na navega√ß√£o para ${page}:`, error.message);
      throw error;
    }
  }

  /**
   * Clica em link do menu de navega√ß√£o
   */
  async clickNavigationLink(linkText, waitForSelector = null) {
    console.log(`üîó Clicando no link: ${linkText}`);
    
    try {
      // Aguardar menu de navega√ß√£o estar vis√≠vel
      await this.page.waitForSelector('[data-testid="navigation"]', {
        timeout: this.config.app.timeouts.element,
      });

      // Encontrar e clicar no link
      const linkSelector = `[data-testid="navigation"] a:has-text("${linkText}"), [data-testid="navigation"] [role="button"]:has-text("${linkText}")`;
      await this.page.waitForSelector(linkSelector, {
        timeout: this.config.app.timeouts.element,
      });
      
      await this.page.click(linkSelector);

      // Aguardar navega√ß√£o
      await this.page.waitForNavigation({
        waitUntil: 'networkidle2',
        timeout: this.config.app.timeouts.navigation,
      });

      // Aguardar elemento espec√≠fico se fornecido
      if (waitForSelector) {
        await this.page.waitForSelector(waitForSelector, {
          timeout: this.config.app.timeouts.element,
        });
      }

      console.log(`‚úÖ Link ${linkText} clicado com sucesso`);
      return true;

    } catch (error) {
      console.error(`‚ùå Erro ao clicar no link ${linkText}:`, error.message);
      throw error;
    }
  }

  /**
   * Verifica se est√° na p√°gina correta
   */
  async isOnPage(expectedPage) {
    try {
      const currentUrl = this.page.url();
      const expectedUrl = this.config.app.urls[expectedPage] || expectedPage;
      
      return currentUrl.includes(expectedUrl);
    } catch (error) {
      console.error(`‚ùå Erro ao verificar p√°gina:`, error.message);
      return false;
    }
  }

  /**
   * Aguarda carregamento completo da p√°gina
   */
  async waitForPageLoad() {
    console.log('‚è≥ Aguardando carregamento da p√°gina...');
    
    try {
      await this.page.waitForLoadState('networkidle');
      await this.page.waitForFunction(() => document.readyState === 'complete');
      
      console.log('‚úÖ P√°gina carregada completamente');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao aguardar carregamento da p√°gina:', error.message);
      throw error;
    }
  }

  /**
   * Volta para a p√°gina anterior
   */
  async goBack() {
    console.log('‚¨ÖÔ∏è Voltando para p√°gina anterior...');
    
    try {
      await this.page.goBack({
        waitUntil: 'networkidle2',
        timeout: this.config.app.timeouts.navigation,
      });
      
      console.log('‚úÖ Navega√ß√£o para tr√°s realizada');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao voltar:', error.message);
      throw error;
    }
  }

  /**
   * Recarrega a p√°gina atual
   */
  async reload() {
    console.log('üîÑ Recarregando p√°gina...');
    
    try {
      await this.page.reload({
        waitUntil: 'networkidle2',
        timeout: this.config.app.timeouts.navigation,
      });
      
      console.log('‚úÖ P√°gina recarregada');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao recarregar p√°gina:', error.message);
      throw error;
    }
  }

  /**
   * Aguarda elemento espec√≠fico aparecer
   */
  async waitForElement(selector, options = {}) {
    const { timeout = this.config.app.timeouts.element, visible = true } = options;
    
    console.log(`üëÄ Aguardando elemento: ${selector}`);
    
    try {
      await this.page.waitForSelector(selector, {
        timeout,
        visible,
      });
      
      console.log(`‚úÖ Elemento ${selector} encontrado`);
      return true;
    } catch (error) {
      console.error(`‚ùå Elemento ${selector} n√£o encontrado:`, error.message);
      throw error;
    }
  }

  /**
   * Aguarda elemento desaparecer
   */
  async waitForElementToDisappear(selector, timeout = null) {
    console.log(`üëª Aguardando elemento desaparecer: ${selector}`);
    
    try {
      await this.page.waitForSelector(selector, {
        state: 'hidden',
        timeout: timeout || this.config.app.timeouts.element,
      });
      
      console.log(`‚úÖ Elemento ${selector} desapareceu`);
      return true;
    } catch (error) {
      console.error(`‚ùå Elemento ${selector} ainda est√° vis√≠vel:`, error.message);
      throw error;
    }
  }

  /**
   * Verifica se elemento est√° vis√≠vel
   */
  async isElementVisible(selector) {
    try {
      const element = await this.page.$(selector);
      if (!element) return false;
      
      const isVisible = await element.isVisible();
      return isVisible;
    } catch (error) {
      return false;
    }
  }

  /**
   * Aguarda API response
   */
  async waitForApiResponse(urlPattern, timeout = null) {
    console.log(`üåê Aguardando resposta da API: ${urlPattern}`);
    
    try {
      await this.page.waitForResponse(
        response => response.url().includes(urlPattern),
        { timeout: timeout || this.config.app.timeouts.api }
      );
      
      console.log(`‚úÖ Resposta da API ${urlPattern} recebida`);
      return true;
    } catch (error) {
      console.error(`‚ùå Timeout aguardando API ${urlPattern}:`, error.message);
      throw error;
    }
  }
}

module.exports = NavigationHelper;
